# -*- coding: utf-8 -*-
"""Rolasni.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pgdoa2D9Ihrs6-6iUAGTnWbmsAIlrEf7
"""

from IPython import get_ipython
from IPython.display import display, HTML, clear_output
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import ipywidgets as widgets
import warnings

warnings.filterwarnings('ignore')

print("🌱 Dashboard Prediksi Temperature Suhu Bandar Lampung Untuk Tanaman Lokal")
print("=" * 60)

# --- Baca Data dari Google Sheets ---
# URL Google Sheets yang sudah di-share (convert ke format CSV)
sheets_url = 'https://docs.google.com/spreadsheets/d/1EPnlVqn1bsxxzMQrlUAWL3QWK6sPrzhX8iv9bLCapbM/export?format=csv'

try:
    # Read the Google Sheets data into a DataFrame

    df = pd.read_csv(sheets_url)

    # Display column names for debugging


    # Ensure we have the right column names - adjust these based on your actual sheet
    if 'Year' not in df.columns and 'Tahun' in df.columns:
        df['Year'] = df['Tahun']
    if 'Month' not in df.columns and 'Bulan' in df.columns:
        df['Month'] = df['Bulan']
    if 'Suhu' not in df.columns and 'Temperature' in df.columns:
        df['Suhu'] = df['Temperature']

    # CRITICAL FIX: Convert string temperature data to numeric
    # Handle comma decimal separators and convert to float
    if df['Suhu'].dtype == 'object':
        # Replace comma with dot for decimal separator
        df['Suhu'] = df['Suhu'].astype(str).str.replace(',', '.', regex=False)
        # Convert to numeric, handling any errors
        df['Suhu'] = pd.to_numeric(df['Suhu'], errors='coerce')

        # Remove any rows with NaN values after conversion
        initial_count = len(df)
        df = df.dropna(subset=['Suhu'])
        final_count = len(df)
        if initial_count != final_count:
            print(f"⚠ Menghapus {initial_count - final_count} baris dengan data suhu tidak valid")

    # Filter data for training period
    df_training = df[(df['Year'] >= 1999) & (df['Year'] <= 2024)].copy()
    suhu_hist = df_training['Suhu'].to_numpy()

except Exception as e:
    print(f"❌ ERROR mengambil data dari Google Sheets: {e}")
    print("⚠ Pastikan link Google Sheets sudah di-share dengan akses 'Anyone with the link can view'")
    print("⚠ Menggunakan data simulasi sebagai fallback.")

    # Fallback to simulated data if Google Sheets fails
    np.random.seed(42)
    years = list(range(1999, 2025))
    months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
              'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    data = []
    for year in years:
        for i, month in enumerate(months):
            base_temp = 27 + 3 * np.sin((i - 3) * np.pi / 6)
            temp = base_temp + np.random.normal(0, 1.5) + (year - 2010) * 0.02
            data.append({'Year': year, 'Month': month, 'Suhu': temp})
    df = pd.DataFrame(data)
    df_training = df[(df['Year'] >= 1999) & (df['Year'] <= 2024)].copy()
    suhu_hist = df_training['Suhu'].to_numpy()
    print(f"📊 Data historis simulasi yang dimuat: {len(suhu_hist)} poin data")
    print(f"📅 Periode: 1999-2024")

# --- Estimasi parameter OU ---
# Ensure suhu_hist has data after the file read attempt
if len(suhu_hist) > 1:
    # Ensure all values are finite (not NaN or inf)
    if np.all(np.isfinite(suhu_hist)):
        mu_hat = np.mean(suhu_hist)
        s_squared = np.var(suhu_hist, ddof=1)
    else:
        print("⚠ Data mengandung nilai NaN atau infinite. Menggunakan data yang valid saja.")
        valid_data = suhu_hist[np.isfinite(suhu_hist)]
        if len(valid_data) > 1:
            suhu_hist = valid_data
            mu_hat = np.mean(suhu_hist)
            s_squared = np.var(suhu_hist, ddof=1)
        else:
            raise ValueError("Tidak cukup data valid untuk analisis.")

    # Ensure suhu_hist has at least 2 data points to calculate rho_hat
    if len(suhu_hist) > 1:
        numerator = np.sum((suhu_hist[1:] - mu_hat) * (suhu_hist[:-1] - mu_hat))
        denominator = np.sum((suhu_hist - mu_hat) ** 2)
        # Avoid division by zero
        rho_hat = numerator / denominator if denominator != 0 else 0
    else:
        rho_hat = 0  # Or another default value

    d = 1
    # Avoid log(0) or log(negative values)
    lambda_hat = -np.log(max(rho_hat, 1e-9)) / d if rho_hat > 0 else 0.1
    sigma_squared_hat = 2 * lambda_hat * s_squared
    sigma_hat = np.sqrt(max(sigma_squared_hat, 0))  # Avoid sqrt of negative
else:
    print("⚠ Tidak cukup data historis untuk menghitung parameter OU.")
    # Set parameters to default values or handle as needed
    mu_hat = 25
    lambda_hat = 0.1
    sigma_hat = 1

# --- Predict temperature for 2025 ---
bulan_labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
prediksi_2025 = []

# Get the last temperature from historical data if available, otherwise use the mean
X_t = suhu_hist[-1] if len(suhu_hist) > 0 else mu_hat

# --- Tambahkan Widget Pemilihan Tahun ---
# Buat list tahun dari data historis
available_years = sorted(df_training['Year'].unique().tolist()) if 'df_training' in locals() and not df_training.empty else []
if available_years:
    year_dropdown = widgets.Dropdown(
        options=available_years,
        value=available_years[-1],
        description='Pilih Tahun:',
        style={'description_width': 'initial'}
    )
else:
    year_dropdown = widgets.Dropdown(
        options=[2024],
        value=2024,
        description='Pilih Tahun:',
        style={'description_width': 'initial'}
    )

# Area output untuk menampilkan data tahun
year_data_output = widgets.Output()

# --- Fungsi untuk Menampilkan Data Tahun Terpilih ---
def display_year_data(change):
    with year_data_output:
        clear_output()
        selected_year = change['new']

        if selected_year is not None:
            print(f"📊 Data Suhu untuk Tahun {selected_year}:")
            print("=" * 30)

            # Filter data for the selected year
            df_year = df_training[df_training['Year'] == selected_year]

            if not df_year.empty:
                # Display the data (e.g., as a table)
                # You can customize the format here
                print(df_year[['Month', 'Suhu']].to_string(index=False))

                # Optionally, you can also create a small plot for that year
                fig_year = go.Figure()
                fig_year.add_trace(go.Scatter(
                    x=df_year['Month'],
                    y=df_year['Suhu'],
                    mode='lines+markers',
                    name=f'{selected_year} Temperature'
                ))
                fig_year.update_layout(
                    title=f'Suhu Bulanan Tahun {selected_year}',
                    xaxis_title='Bulan',
                    yaxis_title='Suhu (°C)',
                    height=300
                )
                fig_year.show()

            else:
                print(f"Tidak ada data suhu tersedia untuk tahun {selected_year}.")
        else:
             print("Pilih tahun dari dropdown di atas.")

# --- Hubungkan Widget dan Fungsi ---
if available_years: # Only observe if there are years to select
    year_dropdown.observe(display_year_data, names='value')
else:
    with year_data_output:
        print("Tidak ada data historis untuk ditampilkan.")


# --- Tampilkan Widget dan Output Data Tahun ---
print("\n📅 Tampilkan Data Suhu per Tahun:")
display(widgets.VBox([
    year_dropdown,
    year_data_output
])) # Tambahkan layout dengan margin bawah 10px


# Generate predictions for 2025
np.random.seed(42)  # For reproducible results
for i in range(12):
    Z = np.random.normal()
    # Calculate OU_var carefully
    OU_var_term = (1 - np.exp(-2 * lambda_hat * d)) / (2 * lambda_hat) if lambda_hat != 0 else d
    OU_var = sigma_hat * np.sqrt(max(OU_var_term, 0))

    X_t = mu_hat + (X_t - mu_hat) * np.exp(-lambda_hat * d) + OU_var * Z
    prediksi_2025.append(X_t)

suhu_prediksi_dict = dict(zip(bulan_labels, prediksi_2025))


# --- Plant temperature ranges ---
tanaman_suhu = {
    "Kacang hijau": (27, 39),
    "Bawang merah": (18, 21),
    "Kentang": (18, 29),
    "Cabe rawit": (18, 27),
    "Tomat": (16, 30),
    "Terong": (22, 30),
    "Kangkung": (20, 30),
    "Bayam": (24, 27),
    "Bawang putih": (15, 25),
    "Pare": (16, 35),
    "Semangka": (30, 32),
    "Ubi jalar": (16, 25),
    "Nanas": (22, 32),
    "Padi": (20, 33),
    "Singkong": (25, 27)
}

# --- Plant care details ---
detail_perawatan = {
    "Kacang hijau": {
        "💧 Air": "Cukup, jangan tergenang",
        "🌱 Tanah": "Gembur dan subur",
        "☀ Cahaya": "Matahari penuh",
        "🌾 Panen": "1 kali dalam 60 hari",
        "🧪 Pupuk": "Kompos dan NPK secukupnya",
        "💰 Peluang jual": "Tinggi di musim kering"
    },
    "Bawang merah": {
        "💧 Air": "Sedang dan teratur",
        "🌱 Tanah": "Lempung berpasir, drainase baik",
        "☀ Cahaya": "Penuh",
        "🌾 Panen": "1 kali dalam 90 hari",
        "🧪 Pupuk": "Pupuk kandang dan NPK",
        "💰 Peluang jual": "Tinggi saat harga naik"
    },
    "Kentang": {
       "💧 Air": "Cukup, hindari becek",
        "🌱 Tanah": "Subur dan gembur",
        "☀ Cahaya": "Penuh",
        "🌾 Panen": "1 kali dalam 110 hari",
        "🧪 Pupuk": "Organik dan kimia secukupnya",
        "💰 Peluang jual": "Stabil sepanjang tahun"
    },
    "Cabe rawit": {
        "💧 Air": "Teratur dan cukup",
        "🌱 Tanah": "Gembur dan subur",
        "☀ Cahaya": "Matahari penuh",
        "🌾 Panen": "Bisa berulang tiap minggu setelah 100 hari",
        "🧪 Pupuk": "Kompos dan NPK rutin",
        "💰 Peluang jual": "Sangat tinggi"
    },
    "Tomat": {
        "💧 Air": "Cukup dan rutin",
        "🌱 Tanah": "Gembur dan subur",
        "☀ Cahaya": "Matahari penuh",
        "🌾 Panen": "1 kali dalam 90 hari",
        "🧪 Pupuk": "Organik dan NPK",
        "💰 Peluang jual": "Baik untuk pasar lokal"
    },
    "Terong": {
        "💧 Air": "Teratur dan cukup",
        "🌱 Tanah": "Gembur dan kaya organik",
        "☀ Cahaya": "Penuh",
        "🌾 Panen": "Berulang setelah 85 hari",
        "🧪 Pupuk": "Kompos dan pupuk kimia",
        "💰 Peluang jual": "Stabil"
    },
    "Kangkung": {
        "💧 Air": "Sangat banyak (bisa ditanam di air)",
        "🌱 Tanah": "Lembab dan subur",
        "☀ Cahaya": "Penuh",
        "🌾 Panen": "1 kali dalam 30 hari",
        "🧪 Pupuk": "Pupuk organik",
        "💰 Peluang jual": "Cepat laku di pasar"
    },
    "Bayam": {
        "💧 Air": "Cukup, jangan kering",
        "🌱 Tanah": "Subur dan gembur",
        "☀ Cahaya": "Penuh",
        "🌾 Panen": "1 kali dalam 25 hari",
        "🧪 Pupuk": "Kompos",
        "💰 Peluang jual": "Baik untuk pasar tradisional"
    },
    "Bawang putih": {
        "💧 Air": "Sedang",
        "🌱 Tanah": "Lempung berpasir",
        "☀ Cahaya": "Penuh",
        "🌾 Panen": "1 kali dalam 100 hari",
        "🧪 Pupuk": "Organik dan fosfat",
        "💰 Peluang jual": "Tinggi, banyak dicari"
    },
    "Pare": {
       "💧 Air": "Sedang, jangan tergenang",
        "🌱 Tanah": "Gembur, kaya organik",
        "☀ Cahaya": "Penuh",
        "🌾 Panen": "Berulang tiap minggu setelah 70 hari",
        "🧪 Pupuk": "Kompos dan NPK",
        "💰 Peluang jual": "Stabil"
    },
    "Semangka": {
        "💧 Air": "Cukup, hindari genangan",
        "🌱 Tanah": "Lempung berpasir",
        "☀ Cahaya": "Penuh",
        "🌾 Panen": "1 kali dalam 90 hari",
        "🧪 Pupuk": "Kompos dan KCL",
        "💰 Peluang jual": "Baik saat musim panas"
    },
    "Ubi jalar": {
        "💧 Air": "Sedang",
        "🌱 Tanah": "Gembur dan subur",
        "☀ Cahaya": "Penuh",
        "🌾 Panen": "1 kali dalam 100 hari",
        "🧪 Pupuk": "Organik dan pupuk daun",
        "💰 Peluang jual": "Baik saat musim hujan"
    },
    "Nanas": {
        "💧 Air": "Sedikit, tahan kering",
        "🌱 Tanah": "Lempung berpasir",
        "☀ Cahaya": "Penuh",
        "🌾 Panen": "1 kali dalam 180 hari",
        "🧪 Pupuk": "NPK dan kompos",
        "💰 Peluang jual": "Tinggi untuk industri jus"
    },
    "Padi": {
       "💧 Air": "Sangat banyak (sawah)",
        "🌱 Tanah": "Lempung dan subur",
        "☀ Cahaya": "Penuh",
        "🌾 Panen": "1 kali dalam 120 hari",
        "🧪 Pupuk": "Urea, TSP, dan KCL",
        "💰 Peluang jual": "Sangat tinggi dan stabil"
    },
    "Singkong": {
        "💧 Air": "Sedikit hingga sedang",
        "🌱 Tanah": "Tidak becek, gembur",
        "☀ Cahaya": "Penuh",
        "🌾 Panen": "1 kali dalam 210 hari",
        "🧪 Pupuk": "Kompos dan KCL",
        "💰 Peluang jual": "Baik untuk industri olahan"
    }
}

# Create interactive dashboard using ipywidgets
output_area = widgets.Output()

# Dropdown for selecting month
month_dropdown = widgets.Dropdown(
    options=bulan_labels,
    value='Jan',
    description='Pilih Bulan:',
    style={'description_width': 'initial'}
)

# Button for analysis
analyze_button = widgets.Button(
    description='🔍 Analisis Tanaman',
    button_style='success',
    layout=widgets.Layout(width='200px')
)

# Area to display results
result_area = widgets.Output()

def analyze_plants(button):
    with result_area:
        clear_output()

        selected_month = month_dropdown.value
        if selected_month in suhu_prediksi_dict:
            predicted_temp = suhu_prediksi_dict[selected_month]
        else:
            print(f"❌ Prediksi suhu untuk bulan {selected_month} tidak tersedia.")
            return

        print(f"🌡 Suhu Prediksi untuk {selected_month} 2025: {predicted_temp:.2f}°C")
        print("=" * 50)

        suitable_plants_data = []
        for nama, (low, high) in tanaman_suhu.items():
            if low <= predicted_temp <= high:
                suitability = "Optimal"
                suitable_plants_data.append({
                    'Nama Tanaman': nama,
                    'Suhu Minimal (°C)': low,
                    'Suhu Maksimal (°C)': high,
                    'Jangkauan Optimal (°C)': f"{low}-{high}",
                    'Kesesuaian': suitability
                })

        if suitable_plants_data:
            print(f"🌱 Tanaman yang Cocok Ditanam untuk Suhu {predicted_temp:.2f}°C:")
            print("-" * 70)

            df_suitable = pd.DataFrame(suitable_plants_data)

            # --- Tambahkan Kolom Detail Perawatan ke DataFrame ---
            df_suitable['Detail Perawatan'] = df_suitable['Nama Tanaman'].apply(
                lambda plant_name: "<br>".join([f"<strong>{k}:</strong> {v}" for k, v in detail_perawatan.get(plant_name, {}).items()])
                if plant_name in detail_perawatan and detail_perawatan.get(plant_name)
                else "Rincian perawatan tidak tersedia."
            )

            # Ambil kolom yang ingin ditampilkan di tabel, TERMASUK 'Detail Perawatan'
            df_display = df_suitable[['Nama Tanaman', 'Jangkauan Optimal (°C)', 'Kesesuaian', 'Detail Perawatan']].copy()

            # Konversi DataFrame ke HTML
            # Menggunakan escape=False karena kolom 'Detail Perawatan' berisi tag HTML (<br>, <strong>)
            html_table = df_display.to_html(index=False, classes='table table-striped table-hover', escape=False)

            # Tampilkan tabel HTML
            display(HTML(html_table))

        else:
            print("❌ Tidak ada tanaman yang cocok untuk suhu ini.")
            print("💡 Pertimbangkan tanaman yang tahan suhu atau menggunakan rumah kaca.")

# Hubungkan button ke fungsi
analyze_button.on_click(analyze_plants)

# Create visualization
fig1 = go.Figure()

# Historical data visualization
if 'df' in locals() and not df.empty:
    # Sort data properly for visualization
    month_order = {month: i for i, month in enumerate(bulan_labels)}
    df_plot = df.copy()
    df_plot['month_num'] = df_plot['Month'].map(month_order)
    df_plot = df_plot.sort_values(['Year', 'month_num'])

    # Create date strings for x-axis
    df_plot['date_str'] = df_plot.apply(lambda row: f"{row['Month']}-{row['Year']}", axis=1)

    # Add historical data trace
    fig1.add_trace(go.Scatter(
        x=df_plot['date_str'],
        y=df_plot['Suhu'],
        mode='lines',
        name=f'Data Historis ({df["Year"].min()}-{df["Year"].max()})',
        line=dict(color='blue', width=1)
    ))

# Add predicted data
if prediksi_2025:
    predicted_dates = [f"{month}-2025" for month in bulan_labels]
    fig1.add_trace(go.Scatter(
        x=predicted_dates,
        y=prediksi_2025,
        mode='lines+markers',
        name='Prediksi 2025',
        line=dict(color='red', width=2),
        marker=dict(size=6)
    ))

fig1.update_layout(
    title='📈 Prediksi Suhu Bandar Lampung 2025',
    xaxis_title='Periode',
    yaxis_title='Suhu (°C)',
    height=500,
    showlegend=True
)

# Create HTML dashboard
dashboard_html = f"""
<div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 20px; border-radius: 10px; margin: 10px 0;">
    <h1 style="color: white; text-align: center; margin: 0;">
        🌱 Dashboard Prediksi Temperature Suhu Bandar Lampung Untuk Tanaman Lokal
    </h1>
    <p style="color: white; text-align: center; margin: 5px 0;">
        Made By Rolasni Rohaida Br Sidabutar 123160003 & Fitriana Sembiring 123160018
    </p>
</div>

<div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 10px 0;">
    <h3>📊 Kesimpulan Prediksi 2025:</h3>
    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px;">
        {''.join([f'<div style="background: white; padding: 10px; border-radius: 5px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);"><strong>{month}</strong><br>{temp:.1f}°C</div>' for month, temp in zip(bulan_labels, prediksi_2025)])}
    </div>
</div>

<div style="background: #e8f5e8; padding: 15px; border-radius: 8px; margin: 10px 0;">
    <h3>🌡 Parameter Model:</h3>
    <ul>
        <li><strong>Suhu Rata-rata (μ):</strong> {mu_hat:.2f}°C</li>
        <li><strong>Tingkat Pembalikan (λ):</strong> {lambda_hat:.4f}</li>
        <li><strong>Volatilitas (σ):</strong> {sigma_hat:.4f}</li>
        <li><strong>Poin Data:</strong> {len(suhu_hist)} (1999-2024)</li>
    </ul>
</div>
"""

display(HTML(dashboard_html))

# Display the temperature prediction chart
fig1.show()

# Display interactive controls
print("🎮 Kontrol Interaktif:")
display(widgets.VBox([
    widgets.HBox([month_dropdown, analyze_button]),
    result_area
]))